#!/usr/bin/env python3

"""
gdrive: Git-like command-line interface for Google Drive
Main router that delegates to individual command files
"""

import sys
import subprocess
import os

def show_help():
    """Show main help message"""
    print("""gdrive - Git-like Google Drive CLI

Usage:
    gdrive <command> [<args>]

Commands:
    init [folder-name]       Initialize gdrive workspace  
    ls [options]             List files in Google Drive
    add <file> [name]        Upload file to Google Drive
    cat <file>               Display file content
    rm <file>                Delete file from Google Drive
    status                   Show sync status
    push                     Upload local changes
    pull                     Download remote changes
    
Options for 'ls':
    --name <filter>          Filter by name
    --type <type>            Filter by type (folder, document, sheet)

Examples:
    gdrive init my-project
    gdrive ls
    gdrive add README.md
    gdrive cat README.md
    gdrive status

Run 'gdrive <command> --help' for more information on a command.
""")

def main():
    """Main router function"""
    if len(sys.argv) < 2:
        show_help()
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command in ['-h', '--help', 'help']:
        show_help()
        sys.exit(0)
    
    command_map = {
        'init': 'gdrive-init',
        'ls': 'gdrive-ls', 
        'add': 'gdrive-add-remote',
        'cat': 'gdrive-cat',
        'rm': 'gdrive-rm',
        'status': 'gdrive-status',
        'push': 'gdrive-push',
        'pull': 'gdrive-pull',
        'checkout': 'gdrive-checkout',
        'branch': 'gdrive-branch',
        'view': 'gdrive-view-files'
    }
    
    if command not in command_map:
        print(f"gdrive: '{command}' is not a gdrive command.", file=sys.stderr)
        print("See 'gdrive --help' for available commands.", file=sys.stderr)
        sys.exit(1)
    
    actual_command = command_map[command]
    
    if not subprocess.run(['which', actual_command], capture_output=True).returncode == 0:
        print(f"gdrive: command '{actual_command}' not found or not implemented yet.", file=sys.stderr)
        sys.exit(1)
    
    try:
        result = subprocess.run([actual_command] + sys.argv[2:])
        sys.exit(result.returncode)
    except KeyboardInterrupt:
        sys.exit(1)
    except Exception as e:
        print(f"gdrive: error executing {actual_command}: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main()